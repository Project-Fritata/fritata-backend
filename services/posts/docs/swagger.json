{
    "swagger": "2.0",
    "info": {
        "description": "This is an API that handles posts in Fritata social network",
        "title": "Fritata Posts API",
        "contact": {
            "name": "Klemen Remec",
            "email": "klemen.remec@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "localhost:8020",
    "basePath": "/",
    "paths": {
        "/api/v1/posts": {
            "get": {
                "description": "Get posts, supports pagination, sorting and filtering",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get posts",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "description": "Sort order",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "description": "Filters",
                        "name": "filters",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.GetPostsRes"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apierrors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apierrors.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create post",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Create post",
                "parameters": [
                    {
                        "description": "Post",
                        "name": "post",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreatePostReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.GetPostsRes"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apierrors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/apierrors.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/apierrors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apierrors.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "apierrors.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "\u003ccustom error message\u003e"
                },
                "status": {
                    "type": "string",
                    "example": "\u003cstatus code\u003e: \u003cstatus message\u003e"
                }
            }
        },
        "models.CreatePostReq": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "media": {
                    "type": "string"
                }
            }
        },
        "models.GetPostsRes": {
            "type": "object",
            "properties": {
                "post": {
                    "$ref": "#/definitions/models.Post"
                },
                "user": {
                    "$ref": "#/definitions/models.User"
                }
            }
        },
        "models.Post": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "id_user": {
                    "type": "string"
                },
                "media": {
                    "type": "string"
                }
            }
        },
        "models.User": {
            "description": "User represents a user in the system",
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "pfp": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    }
}